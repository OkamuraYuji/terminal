#!/bin/bash
set -e

# Setup directories
HOMEA="${PWD}/linux"
CACHE_DIR="${HOMEA}/tmp"
SPT_CACHE_DIR="${CACHE_DIR}/apt/cache"
SPT_STATE_DIR="${CACHE_DIR}/apt/state"
SPT_SOURCELIST_DIR="${CACHE_DIR}/apt/sources"
SPT_SOURCES="${SPT_SOURCELIST_DIR}/sources.list"

# Functions
error() { echo " !     $*" >&2; exit 1; }
topic() { echo "-----> $*"; }
indent() { 
    case $(uname) in
        Darwin) sed -l 's/^/       /';;
        *) sed -u 's/^/       /';;
    esac
}

echo 'SPT - System Package Tool'
echo 'This tool will install apps without root'

# Create directories
mkdir -p "$HOMEA" "$SPT_CACHE_DIR/archives/partial" "$SPT_STATE_DIR/lists/partial" "$SPT_SOURCELIST_DIR"

# SPT configuration
SPT_OPTIONS="-o debug::nolocking=true -o dir::cache=$SPT_CACHE_DIR -o dir::state=$SPT_STATE_DIR -o dir::etc::sourcelist=$SPT_SOURCES"

# Setup sources list
cp "/etc/apt/sources.list" "$SPT_SOURCES"

# Update package lists
topic "Updating apt caches"
apt-get $SPT_OPTIONS update | indent

# Download packages
for PACKAGE in "$@"; do
    if [[ $PACKAGE == *.deb ]]; then
        PACKAGE_NAME="${PACKAGE##*/}"
        PACKAGE_NAME="${PACKAGE_NAME%.deb}"
        PACKAGE_FILE="$SPT_CACHE_DIR/archives/$PACKAGE_NAME.deb"
        topic "Fetching $PACKAGE"
        curl -sL -z "$PACKAGE_FILE" -o "$PACKAGE_FILE" "$PACKAGE" 2>&1 | indent
    else
        topic "Fetching .debs for $PACKAGE"
        apt-get $SPT_OPTIONS -y --force-yes -d install --reinstall "$PACKAGE" | indent
    fi
done

# Install packages
for DEB in "$SPT_CACHE_DIR/archives"/*.deb; do
    [[ -f "$DEB" ]] || continue
    topic "Installing $(basename "$DEB")"
    dpkg -x "$DEB" "$HOMEA"
done

topic "Installation completed"

# Cleanup
rm -rf "$CACHE_DIR"

# Fix pkgconfig paths
find "$HOMEA" -name '*.pc' -path '*/pkgconfig/*' -exec sed -i "s|^prefix=\(.*\)$|prefix=$HOMEA\1|g" {} +

# Setup environment
echo "SETTING ELEMENTS"
PATHS=$(find "$HOMEA" -type d 2>/dev/null | tr '\n' ':')
export LD_LIBRARY_PATH="${PATHS%:}"
export LIBRARY_PATH="${PATHS%:}"  
export PATH="${PATHS%:}:$PATH"
